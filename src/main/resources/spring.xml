<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd


		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.0.xsd"

       default-autowire="byName" default-autowire-candidates="*">

    <!-- Enable AspectJ style of Spring AOP -->
    <!--<aop:aspectj-autoproxy/>

    &lt;!&ndash; Configure Employee Bean and initialize it &ndash;&gt;
    <bean name="employee" class="com.ch1.spring.springcore.ch03.model.Employee">
        <property name="name" value="Dummy Name"/>
    </bean>

    &lt;!&ndash; Configure EmployeeService bean &ndash;&gt;
    <bean name="employeeService" class="com.ch1.spring.springcore.ch03.service.EmployeeService">
        <property name="employee" ref="employee"/>
    </bean>

    &lt;!&ndash; Configure Aspect Beans, without this Aspects advices wont execute &ndash;&gt;
    <bean name="employeeXMLConfigAspect" class="com.ch1.spring.springcore.ch03.aspect.EmployeeXMLConfigAspect"/>
    &lt;!&ndash; Spring AOP XML Configuration &ndash;&gt;
    <aop:config>
        <aop:aspect ref="employeeXMLConfigAspect" id="employeeXMLConfigAspectID" order="1">
            <aop:pointcut id="getNamePointCut"
                          expression="execution(* com.ch1.spring.springcore.ch03.model.Employee.getName())"/>
            <aop:around method="employeeAroundAdvice" pointcut-ref="getNamePointCut" arg-names="proceedingJoinPoint"/>
        </aop:aspect>
    </aop:config>-->

    <!--ch05:Spring Bean Autowiring Example-->
    <!--<bean name="employee" class="com.ch1.spring.springcore.ch05.model.Employee">
        <property name="name" value="Pankaj"/>
    </bean>

    &lt;!&ndash;<bean name="employee" class="com.ch1.spring.springcore.ch05.model.Employee" autowire-candidate="false">
        <property name="name" value="Dummy Name"/>
    </bean>&ndash;&gt;

    &lt;!&ndash; autowiring byName, bean name should be same as the property name &ndash;&gt;
    <bean name="employeeServiceByName" class="com.ch1.spring.springcore.ch05.service.EmployeeService"
          autowire="byName"/>
    &lt;!&ndash; autowiring byType, there should be only one bean definition for the mapping &ndash;&gt;
    <bean name="employeeServiceByType" class="com.ch1.spring.springcore.ch05.service.EmployeeAutowiredByTypeService"
          autowire="byType"/>
    &lt;!&ndash; autowiring by constructor &ndash;&gt;
    <bean name="employeeServiceConstructor" class="com.ch1.spring.springcore.ch05.service.EmployeeAutowiredByConstructorService"
          autowire="constructor"/>

    &lt;!&ndash; Enable Annotation based configuration &ndash;&gt;
    <context:annotation-config/>

    &lt;!&ndash; using @Autowiring annotation in below beans, byType and constructor &ndash;&gt;
    <bean name="employeeAutowiredByTypeService"
          class="com.ch1.spring.springcore.ch05.service.EmployeeAutowiredByTypeService"/>
    <bean name="employeeAutowiredByConstructorService"
          class="com.ch1.spring.springcore.ch05.service.EmployeeAutowiredByConstructorService"/>-->

    <!--ch06:Spring Bean Life Cycle-->
    <!-- Not initializing employee name variable-->
    <!--<bean name="employee" class="com.ch1.spring.springcore.ch06.bean.Employee"/>
    <bean name="employeeService" class="com.ch1.spring.springcore.ch06.service.EmployeeService">
        <property name="employee" ref="employee"/>
    </bean>
    <bean name="myEmployeeService" class="com.ch1.spring.springcore.ch06.service.MyEmployeeService"
          init-method="init" destroy-method="destroy">
        <property name="employee" ref="employee"/>
    </bean>
    &lt;!&ndash; initializing CommonAnnotationBeanPostProcessor is same as context:annotation-config &ndash;&gt;
    <bean class="org.springframework.context.annotation.CommonAnnotationBeanPostProcessor"/>
    <bean name="myService" class="com.ch1.spring.springcore.ch06.service.MyService"/>-->

    <!--ch11:Spring MVC Form Validation Example-->

    <!--ch12:Spring MVC Exception Handling-->

    <!--ch15:Spring JDBC and JdbcTemplate CRUD with DataSource Example-->
    <!--<bean id="employeeDAO" class="com.ch1.spring.springjdbc.ch15.dao.impl.EmployeeDAOImpl">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <bean id="employeeDAOJDBCTemplate" class="com.ch1.spring.springjdbc.ch15.dao.impl.EmployeeDAOJDBCTemplateImpl">
        <property name="dataSource" ref="dataSource"/>
    </bean>-->
    <!--<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        &lt;!&ndash;<property name="driverClassName" value="com.mysql.jdbc.Driver"/>&ndash;&gt;&lt;!&ndash;This is deprecated.&ndash;&gt;
        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/test?serverTimezone=GMT%2B8"/>
        <property name="username" value="root"/>
        <property name="password" value="root"/>
    </bean>-->

    <!--com.ch1.spring.springjdbc.ch17-->
    <!-- Enable Annotation based Declarative Transaction Management -->
    <tx:annotation-driven proxy-target-class="true" transaction-manager="transactionManager"/>
    <!-- Creating TransactionManager Bean, since JDBC we are creating of type
		DataSourceTransactionManager -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- MySQL DB DataSource -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/test?serverTimezone=GMT%2B8"/>
        <property name="username" value="root"/>
        <property name="password" value="root"/>
    </bean>
    <bean id="customerDAO" class="com.ch1.spring.springjdbc.ch17.dao.CustomerDAOImpl">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <bean id="customerManager" class="com.ch1.spring.springjdbc.ch17.service.CustomerManagerImpl">
        <property name="customerDAO" ref="customerDAO"/>
    </bean>

    <!--ch18:Spring Hibernate Integration Example-->
    <!-- Hibernate 3 Annotation SessionFactory Bean definition-->
    <!--<bean id="hibernate3AnnotatedSessionFactory"
          class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">-->
    <bean id="hibernate4AnnotatedSessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="annotatedClasses">
            <list>
                <value>com.ch1.spring.springhibernate.ch18.model.Person</value>
            </list>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                <prop key="hibernate.current_session_context_class">thread</prop>
                <prop key="hibernate.show_sql">false</prop>
            </props>
        </property>
    </bean>

    <bean id="personDAO" class="com.ch1.spring.springhibernate.ch18.dao.PersonDAOImpl">
        <property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory"/>
    </bean>
</beans>